1.import cv2
import matplotlib.pyplot as plt

# Load the colored image
image_path = 'path_to_your_image.jpg'  # Replace with your image path
colored_image = cv2.imread(image_path)

# Convert the image to grayscale
grayscale_image = cv2.cvtColor(colored_image, cv2.COLOR_BGR2GRAY)

# Display the original and grayscale images
plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.title('Colored Image')
plt.imshow(cv2.cvtColor(colored_image, cv2.COLOR_BGR2RGB))
plt.axis('off')

plt.subplot(1, 2, 2)
plt.title('Grayscale Image')
plt.imshow(grayscale_image, cmap='gray')
plt.axis('off')

plt.show()

# Save the grayscale image
grayscale_image_path = 'grayscale_image.jpg'  # Replace with your desired save path
cv2.imwrite(grayscale_image_path, grayscale_image)

2.import cv2
import matplotlib.pyplot as plt

# Load the image
image_path = 'F:/NCET/2023-24/2023-24 EVEN/Computer Vision with Machine Learning/Lab/LabPrograms/car-1.jpeg'  # Replace with your image path
image = cv2.imread(image_path)

# Apply Gaussian blur
ksize = (15, 15)  # Kernel size (15x15)
sigmaX = 0  # Standard deviation in the X direction, 0 means calculate from kernel size
blurred_image = cv2.GaussianBlur(image, ksize, sigmaX)

# Display the original and blurred images
plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.title('Original Image')
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.axis('off')

plt.subplot(1, 2, 2)
plt.title('Blurred Image')
plt.imshow(cv2.cvtColor(blurred_image, cv2.COLOR_BGR2RGB))
plt.axis('off')

plt.show()

# Save the blurred image
blurred_image_path = 'F:/NCET/2023-24/2023-24 EVEN/Computer Vision with Machine Learning/Lab/LabPrograms/blurred_image.jpg'  # Replace with your desired save path
cv2.imwrite(blurred_image_path, blurred_image)


3.import cv2

# Read the image
image_path = 'F:/NCET/2023-24/2023-24 EVEN/Computer Vision with Machine Learning/Lab/LabPrograms/car-1.jpeg'  # Replace with your image path
image = cv2.imread(image_path, 0)  # 0 to read in grayscale

# Perform Canny edge detection
edges = cv2.Canny(image, 100, 200)

# Display the edges
cv2.imshow('Edges', edges)
cv2.waitKey(0)
cv2.destroyAllWindows()


4.import cv2
import numpy as np
import matplotlib.pyplot as plt

def rotate_image(image, angle):
    # Get the dimensions of the image
    (h, w) = image.shape[:2]
    
    # Calculate the center of the image
    center = (w // 2, h // 2)
    
    # Generate the rotation matrix
    M = cv2.getRotationMatrix2D(center, angle, 1.0)
    
    # Perform the rotation
    rotated = cv2.warpAffine(image, M, (w, h))
    return rotated

# Load the image
image_path = 'F:/NCET/2023-24/2023-24 EVEN/Computer Vision with Machine Learning/Lab/LabPrograms/car-1.jpeg'  # Replace with your image path
image = cv2.imread(image_path)

# Specify the angle of rotation
angle = 45  # Example angle

# Rotate the image
rotated_image = rotate_image(image, angle)

# Display the original and rotated images
plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.title('Original Image')
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.axis('off')

plt.subplot(1, 2, 2)
plt.title('Rotated Image')
plt.imshow(cv2.cvtColor(rotated_image, cv2.COLOR_BGR2RGB))
plt.axis('off')

plt.show()

# Save the rotated image
rotated_image_path = 'F:/NCET/2023-24/2023-24 EVEN/Computer Vision with Machine Learning/Lab/LabPrograms/rotated_image.jpg'  # Replace with your desired save path
cv2.imwrite(rotated_image_path, rotated_image)

5.import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image
image_path = 'F:/NCET/2023-24/2023-24 EVEN/Computer Vision with Machine Learning/Lab/LabPrograms/car-1.jpeg'  # Replace with your image path
image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)  # Read as grayscale

# Create a kernel (structuring element)
kernel_size = (5, 5)  # Example kernel size
kernel = np.ones(kernel_size, np.uint8)

# Apply dilation
dilated_image = cv2.dilate(image, kernel, iterations=1)

# Apply erosion
eroded_image = cv2.erode(image, kernel, iterations=1)

# Display the original, dilated, and eroded images
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.title('Original Image')
plt.imshow(image, cmap='gray')
plt.axis('off')

plt.subplot(1, 3, 2)
plt.title('Dilated Image')
plt.imshow(dilated_image, cmap='gray')
plt.axis('off')

plt.subplot(1, 3, 3)
plt.title('Eroded Image')
plt.imshow(eroded_image, cmap='gray')
plt.axis('off')

plt.show()

# Save the processed images
dilated_image_path = 'F:/NCET/2023-24/2023-24 EVEN/Computer Vision with Machine Learning/Lab/LabPrograms/dilated_image.jpg'  # Replace with your desired save path
eroded_image_path = 'F:/NCET/2023-24/2023-24 EVEN/Computer Vision with Machine Learning/Lab/LabPrograms/eroded_image.jpg'  # Replace with your desired save path
cv2.imwrite(dilated_image_path, dilated_image)
cv2.imwrite(eroded_image_path, eroded_image)
